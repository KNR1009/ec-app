{"ast":null,"code":"import _regeneratorRuntime from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{CardElement}from'@stripe/react-stripe-js';import{db,FirebaseTimestamp}from\"../../firebase/index\";import{push}from\"connected-react-router\";import{useDispatch}from'react-redux';var headers=new Headers();headers.set('Content-type','application/json');var BASE_URL=\"https://ec-app-8ba0b.web.app/\";var createCustomer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email,paymentMehotdId,uid){var response,customerResponse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(BASE_URL+'v1/customer',{method:'POST',headers:headers,body:JSON.stringify({email:email,paymentMehotd:paymentMehotdId,uid:uid})});case 2:response=_context.sent;_context.next=5;return response.json();case 5:customerResponse=_context.sent;return _context.abrupt(\"return\",JSON.parse(customerResponse.body));case 7:case\"end\":return _context.stop();}}},_callee);}));return function createCustomer(_x,_x2,_x3){return _ref.apply(this,arguments);};}();export var registerCard=function registerCard(stripe,elements){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var user,email,uid,username,cardElement,_yield$stripe$createP,error,paymentMethod,paymentMehotdId,customerData,updateUserState;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:user=getState().users;email=user.email;uid=user.id;username=user.name;if(!(!stripe||!elements)){_context2.next=6;break;}return _context2.abrupt(\"return\");case 6:// Get a reference to a mounted CardElement. Elements knows how\n// to find your CardElement because there can only ever be one of\n// each type of element.\ncardElement=elements.getElement(CardElement);// Use your card Element with other Stripe.js APIs\n_context2.next=9;return stripe.createPaymentMethod({type:'card',card:cardElement});case 9:_yield$stripe$createP=_context2.sent;error=_yield$stripe$createP.error;paymentMethod=_yield$stripe$createP.paymentMethod;if(!error){_context2.next=15;break;}console.log('error');return _context2.abrupt(\"return\");case 15:paymentMehotdId=paymentMethod.id;_context2.next=18;return createCustomer(email,paymentMehotdId,uid);case 18:customerData=_context2.sent;if(!(customerData.id===\"\")){_context2.next=24;break;}alert('カード情報の登録に失敗しました');return _context2.abrupt(\"return\");case 24:updateUserState={customer_id:customerData.id,payment_method_id:paymentMehotdId};db.collection('users').doc(uid).update(updateUserState).then(function(){// dispatch(updateUserStateAction(updateUserState))\ndispatch(push('/user/mypage'));});case 26:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x4,_x5){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/payments/operations.js"],"names":["CardElement","db","FirebaseTimestamp","push","useDispatch","headers","Headers","set","BASE_URL","createCustomer","email","paymentMehotdId","uid","fetch","method","body","JSON","stringify","paymentMehotd","response","json","customerResponse","parse","registerCard","stripe","elements","dispatch","getState","user","users","id","username","name","cardElement","getElement","createPaymentMethod","type","card","error","paymentMethod","console","log","customerData","alert","updateUserState","customer_id","payment_method_id","collection","doc","update","then"],"mappings":"+SAAA,OAAQA,WAAR,KAA0B,yBAA1B,CACA,OAASC,EAAT,CAAaC,iBAAb,KAAsC,sBAAtC,CACA,OAASC,IAAT,KAAqB,wBAArB,CACA,OAASC,WAAT,KAA4B,aAA5B,CAGA,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,EAAhB,CACAD,OAAO,CAACE,GAAR,CAAY,cAAZ,CAA4B,kBAA5B,EACA,GAAMC,CAAAA,QAAQ,CAAG,+BAAjB,CAEA,GAAMC,CAAAA,cAAc,0FAAG,iBAAMC,KAAN,CAAaC,eAAb,CAA8BC,GAA9B,sKAGIC,CAAAA,KAAK,CAACL,QAAQ,CAAG,aAAZ,CAA2B,CACrDM,MAAM,CAAE,MAD6C,CAErDT,OAAO,CAAEA,OAF4C,CAGrDU,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBP,KAAK,CAAEA,KADY,CAEnBQ,aAAa,CAAEP,eAFI,CAGnBC,GAAG,CAAEA,GAHc,CAAf,CAH+C,CAA3B,CAHT,QAGbO,QAHa,qCAcYA,CAAAA,QAAQ,CAACC,IAAT,EAdZ,QAcbC,gBAda,+CAiBZL,IAAI,CAACM,KAAL,CAAWD,gBAAgB,CAACN,IAA5B,CAjBY,wDAAH,kBAAdN,CAAAA,cAAc,oDAApB,CAoBA,MAAO,IAAMc,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAASC,QAAT,CAAsB,CAChD,gGAAO,kBAAOC,QAAP,CAAiBC,QAAjB,qPACCC,IADD,CACQD,QAAQ,GAAGE,KADnB,CAECnB,KAFD,CAEQkB,IAAI,CAAClB,KAFb,CAGCE,GAHD,CAGOgB,IAAI,CAACE,EAHZ,CAICC,QAJD,CAIYH,IAAI,CAACI,IAJjB,MAMD,CAACR,MAAD,EAAW,CAACC,QANX,oEAYL;AACA;AACA;AACMQ,WAfD,CAeeR,QAAQ,CAACS,UAAT,CAAoBlC,WAApB,CAff,CAiBL;AAjBK,uBAkBgCwB,CAAAA,MAAM,CAACW,mBAAP,CAA2B,CAC9DC,IAAI,CAAE,MADwD,CAE9DC,IAAI,CAAEJ,WAFwD,CAA3B,CAlBhC,6CAkBEK,KAlBF,uBAkBEA,KAlBF,CAkBSC,aAlBT,uBAkBSA,aAlBT,KAuBDD,KAvBC,2BAwBHE,OAAO,CAACC,GAAR,CAAY,OAAZ,EAxBG,0CA4BC9B,eA5BD,CA4BmB4B,aAAa,CAACT,EA5BjC,yBA6BsBrB,CAAAA,cAAc,CAACC,KAAD,CAAQC,eAAR,CAAyBC,GAAzB,CA7BpC,SA6BC8B,YA7BD,qBAgCFA,YAAY,CAACZ,EAAb,GAAoB,EAhClB,4BAiCHa,KAAK,CAAC,iBAAD,CAAL,CAjCG,0CAoCGC,eApCH,CAoCqB,CACtBC,WAAW,CAAEH,YAAY,CAACZ,EADJ,CAEtBgB,iBAAiB,CAAEnC,eAFG,CApCrB,CAyCHV,EAAE,CAAC8C,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BpC,GAA3B,EACCqC,MADD,CACQL,eADR,EAECM,IAFD,CAEM,UAAI,CACR;AACAxB,QAAQ,CAACvB,IAAI,CAAC,cAAD,CAAL,CAAR,CACD,CALD,EAzCG,yDAAP,qEAkDD,CAnDM","sourcesContent":["import {CardElement} from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\n\n\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app/\"\n\nconst createCustomer = async(email, paymentMehotdId, uid) => {\n   \n\n    const response = await fetch(BASE_URL + 'v1/customer', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        email: email,\n        paymentMehotd: paymentMehotdId,\n        uid: uid\n      })\n    })\n\n    // アロー関数を実行してJSON形式で値を受け取っている\n    const customerResponse = await response.json();\n\n    // 返り値として作成したレスポンスのbodyを取得している\n    return JSON.parse(customerResponse.body);\n}\n\nexport const registerCard = (stripe, elements) => {\n  return async (dispatch, getState)=> {\n    const user = getState().users;\n    const email= user.email\n    const uid = user.id\n    const username = user.name\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('error')\n      return\n    } \n\n    const paymentMehotdId = paymentMethod.id;\n    const customerData = await createCustomer(email, paymentMehotdId, uid)\n\n    // 処理がうまくいっているのかの確認を行う\n    if(customerData.id === \"\"){\n      alert('カード情報の登録に失敗しました')\n      return;\n    }else{\n      const updateUserState = {\n        customer_id: customerData.id,\n        payment_method_id: paymentMehotdId\n      }\n\n      db.collection('users').doc(uid)\n      .update(updateUserState)\n      .then(()=>{\n        // dispatch(updateUserStateAction(updateUserState))\n        dispatch(push('/user/mypage'))\n      })\n    }\n    \n  }\n}"]},"metadata":{},"sourceType":"module"}