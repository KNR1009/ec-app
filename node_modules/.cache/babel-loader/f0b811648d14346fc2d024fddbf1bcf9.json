{"ast":null,"code":"import _regeneratorRuntime from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{CardElement}from'@stripe/react-stripe-js';import{db,FirebaseTimestamp}from\"../../firebase/index\";import{push}from\"connected-react-router\";import{useDispatch}from'react-redux';import{updateUserStateAction}from'../users/actions';// Set Header\nvar headers=new Headers();headers.set('Content-type','application/json');var BASE_URL=\"https://ec-app-8ba0b.web.app\";// 新規登録を行うAPI\nvar createCustomer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email,paymentMethodId,uid){var response,customerResponse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(BASE_URL+'/v1/customer',{method:\"POST\",headers:headers,body:JSON.stringify({email:email,paymentMethod:paymentMethodId,userId:uid})});case 2:response=_context.sent;_context.next=5;return response.json();case 5:customerResponse=_context.sent;return _context.abrupt(\"return\",JSON.parse(customerResponse.body));case 7:case\"end\":return _context.stop();}}},_callee);}));return function createCustomer(_x,_x2,_x3){return _ref.apply(this,arguments);};}();export var registerCard=function registerCard(stripe,elements){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var user,email,uid,cardElement,_yield$stripe$createP,error,paymentMethod,paymentMethodId,customerData,updateUserState;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:user=getState().users;email=user.email;uid=user.uid;if(!(!stripe||!elements)){_context2.next=6;break;}// Stripe.js has not loaded yet. Make sure to disable\n// form submission until Stripe.js has loaded.\nconsole.error(\"Does not exist stripe or elements\");return _context2.abrupt(\"return\");case 6:// Get a reference to a mounted CardElement. Elements knows how\n// to find your CardElement because there can only ever be one of\n// each type of element.\ncardElement=elements.getElement(CardElement);// Use your card Element with other Stripe.js APIs\n_context2.next=9;return stripe.createPaymentMethod({type:'card',card:cardElement});case 9:_yield$stripe$createP=_context2.sent;error=_yield$stripe$createP.error;paymentMethod=_yield$stripe$createP.paymentMethod;if(!error){_context2.next=15;break;}alert('error');return _context2.abrupt(\"return\");case 15:paymentMethodId=paymentMethod===null||paymentMethod===void 0?void 0:paymentMethod.id;_context2.next=18;return createCustomer(email,paymentMethodId,uid);case 18:customerData=_context2.sent;if(!(customerData.id===\"\")){_context2.next=24;break;}alert('カード情報の登録に失敗しました');return _context2.abrupt(\"return\");case 24:updateUserState={customer_id:customerData.id,payment_method_id:paymentMethodId};// db.collection('users').doc(uid)\n//   .update(updateUserState)\n//   .then(()=>{\n//     dispatch(updateUserStateAction(updateUserState))\n//     dispatch(push('/user/mypage'))\n//   }).catch((error)=>{\n//     // 顧客は登録されているが、stripe側には登録されている\n//     alert('firebaseでの登録に失敗しました')\n//   })\ncase 25:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x4,_x5){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/payments/operations.js"],"names":["CardElement","db","FirebaseTimestamp","push","useDispatch","updateUserStateAction","headers","Headers","set","BASE_URL","createCustomer","email","paymentMethodId","uid","fetch","method","body","JSON","stringify","paymentMethod","userId","response","json","customerResponse","parse","registerCard","stripe","elements","dispatch","getState","user","users","console","error","cardElement","getElement","createPaymentMethod","type","card","alert","id","customerData","updateUserState","customer_id","payment_method_id"],"mappings":"+SAAA,OAAQA,WAAR,KAA0B,yBAA1B,CACA,OAASC,EAAT,CAAaC,iBAAb,KAAsC,sBAAtC,CACA,OAASC,IAAT,KAAqB,wBAArB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,qBAAT,KAAsC,kBAAtC,CAGA;AACA,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,EAAhB,CACAD,OAAO,CAACE,GAAR,CAAY,cAAZ,CAA4B,kBAA5B,EACA,GAAMC,CAAAA,QAAQ,CAAG,8BAAjB,CAEA;AACA,GAAMC,CAAAA,cAAc,0FAAG,iBAAOC,KAAP,CAAcC,eAAd,CAA+BC,GAA/B,sKACIC,CAAAA,KAAK,CAACL,QAAQ,CAAG,cAAZ,CAA4B,CACpDM,MAAM,CAAE,MAD4C,CAEpDT,OAAO,CAAEA,OAF2C,CAGpDU,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBP,KAAK,CAAEA,KADU,CAEjBQ,aAAa,CAAEP,eAFE,CAGjBQ,MAAM,CAAEP,GAHS,CAAf,CAH8C,CAA5B,CADT,QACbQ,QADa,qCAWYA,CAAAA,QAAQ,CAACC,IAAT,EAXZ,QAWbC,gBAXa,+CAYZN,IAAI,CAACO,KAAL,CAAWD,gBAAgB,CAACP,IAA5B,CAZY,wDAAH,kBAAdN,CAAAA,cAAc,oDAApB,CAgBA,MAAO,IAAMe,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAASC,QAAT,CAAsB,CAChD,gGAAO,kBAAOC,QAAP,CAAiBC,QAAjB,4OACCC,IADD,CACQD,QAAQ,GAAGE,KADnB,CAECpB,KAFD,CAESmB,IAAI,CAACnB,KAFd,CAGCE,GAHD,CAGOiB,IAAI,CAACjB,GAHZ,MAKD,CAACa,MAAD,EAAW,CAACC,QALX,2BAMH;AACA;AACAK,OAAO,CAACC,KAAR,CAAc,mCAAd,EARG,yCAYL;AACA;AACA;AACMC,WAfD,CAeeP,QAAQ,CAACQ,UAAT,CAAoBnC,WAApB,CAff,CAiBL;AAjBK,uBAkBgC0B,CAAAA,MAAM,CAACU,mBAAP,CAA2B,CAC9DC,IAAI,CAAE,MADwD,CAE9DC,IAAI,CAAEJ,WAFwD,CAA3B,CAlBhC,6CAkBED,KAlBF,uBAkBEA,KAlBF,CAkBSd,aAlBT,uBAkBSA,aAlBT,KAuBDc,KAvBC,2BAwBHM,KAAK,CAAC,OAAD,CAAL,CAxBG,0CA4BC3B,eA5BD,CA4BmBO,aA5BnB,SA4BmBA,aA5BnB,iBA4BmBA,aAAa,CAAEqB,EA5BlC,yBA6BsB9B,CAAAA,cAAc,CAACC,KAAD,CAAQC,eAAR,CAAyBC,GAAzB,CA7BpC,SA6BC4B,YA7BD,qBAgCFA,YAAY,CAACD,EAAb,GAAoB,EAhClB,4BAiCHD,KAAK,CAAC,iBAAD,CAAL,CAjCG,0CAoCIG,eApCJ,CAoCsB,CACrBC,WAAW,CAAEF,YAAY,CAACD,EADL,CAErBI,iBAAiB,CAAEhC,eAFE,CApCtB,CAyCL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDK,yDAAP,qEAqDD,CAtDM","sourcesContent":["import {CardElement} from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\nimport { updateUserStateAction } from '../users/actions'\n\n\n// Set Header\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app\"\n\n// 新規登録を行うAPI\nconst createCustomer = async (email, paymentMethodId, uid) => {\n    const response = await fetch(BASE_URL + '/v1/customer', {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify({\n            email: email,\n            paymentMethod: paymentMethodId,\n            userId: uid,\n        })\n    });\n\n    const customerResponse = await response.json();\n    return JSON.parse(customerResponse.body);\n}\n\n\nexport const registerCard = (stripe, elements) => {\n  return async (dispatch, getState)=> {\n    const user = getState().users;\n    const email = user.email;\n    const uid = user.uid;\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      console.error(\"Does not exist stripe or elements\");\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      alert('error')\n      return;\n    } \n\n    const paymentMethodId = paymentMethod?.id;\n    const customerData = await createCustomer(email, paymentMethodId, uid)\n\n    // 処理がうまくいっているのかの確認を行う\n    if(customerData.id === \"\"){\n      alert('カード情報の登録に失敗しました')\n      return;\n    }else{\n       const updateUserState = {\n          customer_id: customerData.id,\n          payment_method_id: paymentMethodId\n      }\n\n    // db.collection('users').doc(uid)\n    //   .update(updateUserState)\n    //   .then(()=>{\n    //     dispatch(updateUserStateAction(updateUserState))\n    //     dispatch(push('/user/mypage'))\n    //   }).catch((error)=>{\n    //     // 顧客は登録されているが、stripe側には登録されている\n    //     alert('firebaseでの登録に失敗しました')\n    //   })\n    }\n    \n  }\n}"]},"metadata":{},"sourceType":"module"}