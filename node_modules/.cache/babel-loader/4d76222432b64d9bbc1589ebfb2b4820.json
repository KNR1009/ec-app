{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nimport { useDispatch } from \"react-redux\";\nexport const signIn = () => {\n  // コールバック関数を返り値として持つようにする\n  return async (dispatch, getState) => {\n    // 現在のstateを取得する\n    const state = getState();\n    const isSignedIn = state.users.isSignedIn; // ログイン状態だった場合にgithubんおAPIを叩く(非同期処理)\n\n    if (!isSignedIn) {\n      const url = \"https://api.github.com/users/aponasi178cm\"; // 非同期処理を記述\n\n      const response = await fetch(url).then(res => res.json()).catch(() => null);\n      console.log(response);\n      const username = response.login; // 取得したレスポンスをstoreに格納する\n\n      dispatch(signInAction({\n        isSignedIn: true,\n        uid: '1011',\n        username: username\n      }));\n    }\n\n    ; // 成功したらHomeに遷移する\n\n    dispatch(push('/'));\n  }; // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n};\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validations\n    if (!isValidRequiredInput(email, password, confirmPassword)) {\n      alert(\"必須項目が未入力です。\");\n      return false;\n    }\n\n    if (!isValidEmailFormat(email)) {\n      alert(\"メールアドレスの形式が不正です。もう1度お試しください。\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう1度お試しください。\");\n      return false;\n    }\n\n    if (password.length < 6) {\n      alert(\"パスワードは6文字以上で入力してください。\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      dispatch(showLoadingAction(\"Sign up...\"));\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          customer_id: \"\",\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          payment_method_id: \"\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        usersRef.doc(uid).set(userInitialData).then(async () => {\n          // const sendThankYouMail = functions.httpsCallable('sendThankYouMail');\n          // await sendThankYouMail({\n          //     email: email,\n          //     userId: uid,\n          //     username: username,\n          // });\n          dispatch(push(\"/\"));\n          dispatch(hideLoadingAction());\n        });\n      }\n    }).catch(error => {\n      dispatch(hideLoadingAction());\n      alert(\"アカウント登録に失敗しました。もう1度お試しください。\");\n      throw new Error(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","useDispatch","signIn","dispatch","getState","state","isSignedIn","users","url","response","fetch","then","res","json","catch","console","log","username","login","uid","signUp","email","password","confirmPassword","isValidRequiredInput","alert","isValidEmailFormat","length","createUserWithEmailAndPassword","result","showLoadingAction","user","timestamp","now","userInitialData","customer_id","created_at","role","payment_method_id","updated_at","usersRef","doc","set","hideLoadingAction","error","Error"],"mappings":"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","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\nexport const signIn = () => {\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch, getState) => {\n  // 現在のstateを取得する\n  const state = getState();\n  const isSignedIn = state.users.isSignedIn;\n\n  // ログイン状態だった場合にgithubんおAPIを叩く(非同期処理)\n  if(!isSignedIn){\n    const url = \"https://api.github.com/users/aponasi178cm\";\n\n    // 非同期処理を記述\n    const response = await fetch(url).then(res => res.json()).catch(()=>null)\n\n    console.log(response);\n\n    const username = response.login;\n\n    // 取得したレスポンスをstoreに格納する\n    dispatch(signInAction({\n      isSignedIn: true,\n      uid: '1011',\n      username: username\n    }))\n    };\n\n    // 成功したらHomeに遷移する\n    dispatch(push('/'));\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validations\n    if (!isValidRequiredInput(email, password, confirmPassword)) {\n      alert(\"必須項目が未入力です。\");\n      return false;\n    }\n\n    if (!isValidEmailFormat(email)) {\n      alert(\"メールアドレスの形式が不正です。もう1度お試しください。\");\n      return false;\n    }\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう1度お試しください。\");\n      return false;\n    }\n    if (password.length < 6) {\n      alert(\"パスワードは6文字以上で入力してください。\");\n      return false;\n    }\n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        dispatch(showLoadingAction(\"Sign up...\"));\n        const user = result.user;\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            customer_id: \"\",\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            payment_method_id: \"\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n          };\n\n          usersRef\n            .doc(uid)\n            .set(userInitialData)\n            .then(async () => {\n              // const sendThankYouMail = functions.httpsCallable('sendThankYouMail');\n              // await sendThankYouMail({\n              //     email: email,\n              //     userId: uid,\n              //     username: username,\n              // });\n              dispatch(push(\"/\"));\n              dispatch(hideLoadingAction());\n            });\n        }\n      })\n      .catch((error) => {\n        dispatch(hideLoadingAction());\n        alert(\"アカウント登録に失敗しました。もう1度お試しください。\");\n        throw new Error(error);\n      });\n  };\n};"]},"metadata":{},"sourceType":"module"}