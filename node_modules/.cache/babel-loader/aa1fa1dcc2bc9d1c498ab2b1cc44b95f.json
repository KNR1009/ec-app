{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nimport { useDispatch } from \"react-redux\";\nexport const signIn = () => {\n  // コールバック関数を返り値として持つようにする\n  return async (dispatch, getState) => {\n    // 現在のstateを取得する\n    const state = getState();\n    const isSignedIn = state.users.isSignedIn; // ログイン状態だった場合にgithubんおAPIを叩く(非同期処理)\n\n    if (!isSignedIn) {\n      const url = \"https://api.github.com/users/aponasi178cm\"; // 非同期処理を記述\n\n      const response = await fetch(url).then(res => res.json()).catch(() => null);\n      console.log(response);\n      const username = response.login; // 取得したレスポンスをstoreに格納する\n\n      dispatch(signInAction({\n        isSignedIn: true,\n        uid: '1011',\n        username: username\n      }));\n    }\n\n    ; // 成功したらHomeに遷移する\n\n    dispatch(push('/'));\n  }; // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n};\nexport const signUp = (username, email, password, confirmPassword) => {\n  var _s = $RefreshSig$();\n\n  return async dispatch => {\n    // バリデーションを行う\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert('必須項目が未入力です');\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n  }; // 認証機能を付与する\n\n  return auth.createUserWithEmailAndPassword(email, password).then(_s(resulet => {\n    _s();\n\n    const user = resulet.user;\n\n    if (user) {\n      const uid = user.uid;\n      const timestamp = FirebaseTimestamp.now();\n      const dispatch = useDispatch();\n      const userInitialData = {\n        create_at: timestamp,\n        email: email,\n        role: \"customer\",\n        uid: uid,\n        updated_at: timestamp,\n        username: username\n      };\n      db.collection('users').doc(uid).set(userInitialData).then(() => {\n        dispatch(push('/'));\n      });\n    }\n  }, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n    return [useDispatch];\n  }));\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","useDispatch","signIn","dispatch","getState","state","isSignedIn","users","url","response","fetch","then","res","json","catch","console","log","username","login","uid","signUp","email","password","confirmPassword","alert","createUserWithEmailAndPassword","resulet","user","timestamp","now","userInitialData","create_at","role","updated_at","collection","doc","set"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,EAAjC,QAA0C,sBAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAC1B;AACA,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACpC;AACA,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAME,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYD,UAA/B,CAHoC,CAKpC;;AACA,QAAG,CAACA,UAAJ,EAAe;AACb,YAAME,GAAG,GAAG,2CAAZ,CADa,CAGb;;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EAAmCC,KAAnC,CAAyC,MAAI,IAA7C,CAAvB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AAEA,YAAMQ,QAAQ,GAAGR,QAAQ,CAACS,KAA1B,CARa,CAUb;;AACAf,MAAAA,QAAQ,CAACP,YAAY,CAAC;AACpBU,QAAAA,UAAU,EAAE,IADQ;AAEpBa,QAAAA,GAAG,EAAE,MAFe;AAGpBF,QAAAA,QAAQ,EAAEA;AAHU,OAAD,CAAb,CAAR;AAKC;;AAAA,KAtBiC,CAwBlC;;AACAd,IAAAA,QAAQ,CAACN,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,GA1BD,CAF0B,CA8B1B;AACD,CA/BM;AAiCP,OAAO,MAAMuB,MAAM,GAAG,CAACH,QAAD,EAAWI,KAAX,EAAkBC,QAAlB,EAA4BC,eAA5B,KAA+C;AAAA;;AACjE,SAAO,MAAOpB,QAAP,IAAmB;AACxB;AACA,QAAGc,QAAQ,KAAK,EAAb,IAAmBI,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAAnD,EAAsD;AACpDE,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,QAAGF,QAAQ,KAAKC,eAAhB,EAAgC;AAC9BC,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,aAAQ,KAAR;AACD;AACF,GAXD,CADiE,CAcjE;;AAEA,SAAO1B,IAAI,CAAC2B,8BAAL,CAAoCJ,KAApC,EAA2CC,QAA3C,EAAqDX,IAArD,IAA0De,OAAO,IAAE;AAAA;;AACxE,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;;AAEA,QAAGA,IAAH,EAAQ;AACJ,YAAMR,GAAG,GAAGQ,IAAI,CAACR,GAAjB;AACA,YAAMS,SAAS,GAAG7B,iBAAiB,CAAC8B,GAAlB,EAAlB;AACA,YAAM1B,QAAQ,GAAGF,WAAW,EAA5B;AAGA,YAAM6B,eAAe,GAAG;AACpBC,QAAAA,SAAS,EAAEH,SADS;AAEpBP,QAAAA,KAAK,EAAEA,KAFa;AAGpBW,QAAAA,IAAI,EAAE,UAHc;AAIpBb,QAAAA,GAAG,EAAEA,GAJe;AAKpBc,QAAAA,UAAU,EAAEL,SALQ;AAMpBX,QAAAA,QAAQ,EAAEA;AANU,OAAxB;AASAjB,MAAAA,EAAE,CAACkC,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BhB,GAA3B,EAAgCiB,GAAhC,CAAoCN,eAApC,EAAqDnB,IAArD,CAA0D,MAAI;AAC5DR,QAAAA,QAAQ,CAACN,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,OAFD;AAGH;AACF,GAtBM;AAAA,YAMgBI,WANhB;AAAA,KAAP;AAwBH,CAxCM","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\nexport const signIn = () => {\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch, getState) => {\n  // 現在のstateを取得する\n  const state = getState();\n  const isSignedIn = state.users.isSignedIn;\n\n  // ログイン状態だった場合にgithubんおAPIを叩く(非同期処理)\n  if(!isSignedIn){\n    const url = \"https://api.github.com/users/aponasi178cm\";\n\n    // 非同期処理を記述\n    const response = await fetch(url).then(res => res.json()).catch(()=>null)\n\n    console.log(response);\n\n    const username = response.login;\n\n    // 取得したレスポンスをstoreに格納する\n    dispatch(signInAction({\n      isSignedIn: true,\n      uid: '1011',\n      username: username\n    }))\n    };\n\n    // 成功したらHomeに遷移する\n    dispatch(push('/'));\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\nexport const signUp = (username, email, password, confirmPassword) =>{\n    return async (dispatch) =>{\n      // バリデーションを行う\n      if(username === \"\" || email === \"\" || password === \"\"){\n        alert('必須項目が未入力です')\n        return false\n      }\n\n      if(password !== confirmPassword){\n        alert(\"パスワードが一致しません。もう一度お試しください\")\n        return  false\n      }\n    }\n\n    // 認証機能を付与する\n\n    return auth.createUserWithEmailAndPassword(email, password).then(resulet=>{\n      const user = resulet.user\n      \n      if(user){\n          const uid = user.uid\n          const timestamp = FirebaseTimestamp.now()\n          const dispatch = useDispatch();\n\n\n          const userInitialData = {\n              create_at: timestamp,\n              email: email,\n              role: \"customer\",\n              uid: uid,\n              updated_at: timestamp,\n              username: username\n          }\n\n          db.collection('users').doc(uid).set(userInitialData).then(()=>{\n            dispatch(push('/'))\n          })\n      }\n    })\n\n}"]},"metadata":{},"sourceType":"module"}