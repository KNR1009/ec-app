{"ast":null,"code":"import { CardElement } from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\nimport { updateUserStateAction } from '../users/actions'; // Set Header\n\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app\"; // 新規登録を叩く\n\nconst createCustomer = async (email, paymentMethodId, uid) => {\n  const response = await fetch(BASE_URL + '/v1/customer', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      email: email,\n      paymentMethod: paymentMethodId,\n      userId: uid\n    })\n  });\n  const customerResponse = await response.json(); // firebaseに保存するために返り値を保存する\n\n  return JSON.parse(customerResponse.body);\n}; // ユーザーのカード情報を取得するAPIを叩くメソット\n\n\nexport const retrievePaymentMethod = async paymentMethodId => {\n  const response = await fetch(BASE_URL + '/v1/paymentMethod', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      paymentMethodId: paymentMethodId\n    })\n  });\n  const cardResponse = await response.json();\n  const paymentMethod = JSON.parse(cardResponse.body);\n  return paymentMethod.card;\n};\nexport const registerCard = (stripe, elements) => {\n  return async (dispatch, getState) => {\n    // ログインユーザーの情報を取得する\n    const user = getState().users;\n    const email = user.email;\n    const uid = user.uid; // 以下はバリデーションの定型分(コピペ)\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      console.error(\"Does not exist stripe or elements\");\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    // 以下でカード情報を取得する\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      alert('error');\n      return;\n    } // paymentメソットをトークン化したidを以下で取得する\n\n\n    const paymentMethodId = paymentMethod === null || paymentMethod === void 0 ? void 0 : paymentMethod.id; // APIを叩くメソットを呼び出す(メソットはreturnでJSON.parse(customerResponse.bodyを返していたので以下の変数に格納)\n\n    const customerData = await createCustomer(email, paymentMethodId, uid); // 処理がうまくいっているのかの確認を行う\n\n    if (customerData.id === \"\") {\n      alert('カード情報の登録に失敗しました');\n      return;\n    } else {\n      const updateUserState = {\n        customer_id: customerData.id,\n        payment_method_id: paymentMethodId\n      };\n      db.collection('users').doc(uid).update(updateUserState).then(() => {\n        dispatch(updateUserStateAction(updateUserState));\n        dispatch(push('/user/mypage'));\n      }).catch(error => {\n        // stripe側には顧客情報が保存されている\n        alert('firebaseでの登録に失敗しました');\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/payments/operations.js"],"names":["CardElement","db","FirebaseTimestamp","push","useDispatch","updateUserStateAction","headers","Headers","set","BASE_URL","createCustomer","email","paymentMethodId","uid","response","fetch","method","body","JSON","stringify","paymentMethod","userId","customerResponse","json","parse","retrievePaymentMethod","cardResponse","card","registerCard","stripe","elements","dispatch","getState","user","users","console","error","cardElement","getElement","createPaymentMethod","type","alert","id","customerData","updateUserState","customer_id","payment_method_id","collection","doc","update","then","catch"],"mappings":"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","sourcesContent":["import {CardElement} from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\nimport { updateUserStateAction } from '../users/actions'\n\n\n// Set Header\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app\"\n\n// 新規登録を叩く\nconst createCustomer = async (email, paymentMethodId, uid) => {\n    const response = await fetch(BASE_URL + '/v1/customer', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n            email: email,\n            paymentMethod: paymentMethodId,\n            userId: uid\n        })\n    });\n\n    const customerResponse = await response.json();\n    // firebaseに保存するために返り値を保存する\n    return JSON.parse(customerResponse.body);\n}\n\n// ユーザーのカード情報を取得するAPIを叩くメソット\nexport const retrievePaymentMethod = async (paymentMethodId) => {\n    const response = await fetch(BASE_URL + '/v1/paymentMethod', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n            paymentMethodId: paymentMethodId\n        })\n    });\n\n    const cardResponse = await response.json();\n    const paymentMethod = JSON.parse(cardResponse.body);\n    return paymentMethod.card\n}\n\n\nexport const registerCard = (stripe, elements) => {\n  return async (dispatch, getState)=> {\n    // ログインユーザーの情報を取得する\n    const user = getState().users;\n    const email = user.email;\n    const uid = user.uid;\n\n    // 以下はバリデーションの定型分(コピペ)\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      console.error(\"Does not exist stripe or elements\");\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n    // 以下でカード情報を取得する\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n     const {error, paymentMethod} = await stripe.createPaymentMethod({\n            type: 'card',\n            card: cardElement,\n        });\n\n    if (error) {\n      alert('error')\n      return;\n    } \n\n    // paymentメソットをトークン化したidを以下で取得する\n    const paymentMethodId = paymentMethod?.id;\n    \n    // APIを叩くメソットを呼び出す(メソットはreturnでJSON.parse(customerResponse.bodyを返していたので以下の変数に格納)\n   const customerData = await createCustomer(email, paymentMethodId, uid);\n\n    // 処理がうまくいっているのかの確認を行う\n    if(customerData.id === \"\"){\n      alert('カード情報の登録に失敗しました')\n      return;\n    }else{\n       const updateUserState = {\n          customer_id: customerData.id,\n          payment_method_id: paymentMethodId\n      }\n      db.collection('users').doc(uid)\n        .update(updateUserState)\n        .then(()=>{\n          dispatch(updateUserStateAction(updateUserState))\n          dispatch(push('/user/mypage'))\n        }).catch((error)=>{\n          // stripe側には顧客情報が保存されている\n          alert('firebaseでの登録に失敗しました')\n        })\n      }\n  }\n}"]},"metadata":{},"sourceType":"module"}