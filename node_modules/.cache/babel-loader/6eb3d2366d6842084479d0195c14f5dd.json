{"ast":null,"code":"import _regeneratorRuntime from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{signInAction,fetchProductsInCartAction,fetchOrderHistoryAction}from\"./actions\";import{push}from'connected-react-router';import{auth,FirebaseTimestamp,db}from'../../firebase/index';import{useDispatch}from\"react-redux\";// カートに追加するオペレーションを作成する\nexport var addProductToCart=function addProductToCart(addedProduct){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var uid,cartRef;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:uid=getState().users.uid;cartRef=db.collection('users').doc(uid).collection('cart').doc();addedProduct['cartId']=cartRef.id;_context.next=5;return cartRef.set(addedProduct);case 5:dispatch(push('/'));case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var fetchProductsInCart=function fetchProductsInCart(products){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(fetchProductsInCartAction(products));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3){return _ref2.apply(this,arguments);};}();};// 注文履歴を取得するオペレーション\nexport var fetchOrderHistory=function fetchOrderHistory(){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){var uid,list;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// 現在のログインユーザーの取得\nuid=getState().users.uid;list=[];// firebaseへアクセスして注文履歴の取得\ndb.collection('users').doc(uid).collection('orders').orderBy('updated_at','desc').get().then(function(snapshots){snapshots.forEach(function(snapshot){var data=snapshot.data();list.push(data);});dispatch(fetchOrderHistoryAction(list));});case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x4,_x5){return _ref3.apply(this,arguments);};}();};// 認証リッスン\nexport var listenAuthState=function listenAuthState(){// redux-thunkを利用定型文\nreturn/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",auth.onAuthStateChanged(function(user){// 認証されていた場合はstateを変更\nif(user){var uid=user.uid;db.collection(\"users\").doc(uid).get().then(function(snapshot){var data=snapshot.data();// 以下でアクションを呼び出しsiginの処理を行う\ndispatch(signInAction({isSignedIn:true,role:data.role,uid:uid,username:data.username}));});}else{dispatch(push('/signIn'));}}));case 1:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x6){return _ref4.apply(this,arguments);};}();};// ログイン\nexport var signIn=function signIn(email,password){var dispatch=useDispatch;// コールバック関数を返り値として持つようにする\nreturn/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(email===\"\"||password===\"\")){_context5.next=3;break;}alert(\"必須項目が未入力です\");return _context5.abrupt(\"return\",false);case 3:auth.signInWithEmailAndPassword(email,password).then(function(result){var user=result.user;// ユーザが存在すれば処理にすすむ\nif(user){var uid=user.uid;db.collection(\"users\").doc(uid).get().then(function(snapshot){var data=snapshot.data();// 以下でアクションを呼び出しsiginの処理を行う\ndispatch(signInAction({isSignedIn:true,role:data.role,uid:uid,username:data.username}));dispatch(push(\"/\"));});}});case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x7){return _ref5.apply(this,arguments);};}();// 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n};// ログアウト\nexport var signOut=function signOut(){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:auth.signOut().then(function(){dispatch(push('/'));});case 1:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x8){return _ref6.apply(this,arguments);};}();};// パスワードを再設定\nexport var restPassword=function restPassword(email){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:if(!(email===\"\")){_context7.next=5;break;}alert(\"必須項目が未入力です\");return _context7.abrupt(\"return\",false);case 5:auth.sendPasswordResetEmail(email).then(function(){alert('入力されたメールにパスワードリセット用のメールを送りました');dispatch(push('/signin'));}).catch(function(){alert('パスワードリセットに失敗しました');});case 6:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x9){return _ref7.apply(this,arguments);};}();};// 新規登録\nexport var signUp=function signUp(username,email,password,confirmPassword){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:if(!(username===\"\"||email===\"\"||password===\"\")){_context8.next=3;break;}alert(\"必須項目が未入力です\");return _context8.abrupt(\"return\",false);case 3:if(!(password!==confirmPassword)){_context8.next=6;break;}alert(\"パスワードが一致しません。もう一度お試しください\");return _context8.abrupt(\"return\",false);case 6:return _context8.abrupt(\"return\",auth.createUserWithEmailAndPassword(email,password).then(function(result){var user=result.user;if(user){var uid=user.uid;var timestamp=FirebaseTimestamp.now();var userInitialData={customer_id:\"\",created_at:timestamp,email:email,role:\"customer\",uid:uid,updated_at:timestamp,username:username};db.collection(\"users\").doc(uid).set(userInitialData).then(function(){dispatch(push(\"/\"));});}}));case 7:case\"end\":return _context8.stop();}}},_callee8);}));return function(_x10){return _ref8.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","fetchProductsInCartAction","fetchOrderHistoryAction","push","auth","FirebaseTimestamp","db","useDispatch","addProductToCart","addedProduct","dispatch","getState","uid","users","cartRef","collection","doc","id","set","fetchProductsInCart","products","fetchOrderHistory","list","orderBy","get","then","snapshots","forEach","snapshot","data","listenAuthState","onAuthStateChanged","user","isSignedIn","role","username","signIn","email","password","alert","signInWithEmailAndPassword","result","signOut","restPassword","sendPasswordResetEmail","catch","signUp","confirmPassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","customer_id","created_at","updated_at"],"mappings":"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","sourcesContent":["import {signInAction, fetchProductsInCartAction, fetchOrderHistoryAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\n\n\n// カートに追加するオペレーションを作成する\nexport const addProductToCart = (addedProduct) => {\n    return async (dispatch, getState) => {\n        const uid = getState().users.uid;\n        const cartRef = db.collection('users').doc(uid).collection('cart').doc()\n        addedProduct['cartId'] = cartRef.id;\n        await cartRef.set(addedProduct);\n        dispatch(push('/'))\n    }\n}\n\nexport const fetchProductsInCart = (products) => {\n  return async(dispatch) => {\n    dispatch(fetchProductsInCartAction(products))\n  }\n}\n\n\n// 注文履歴を取得するオペレーション\nexport const fetchOrderHistory = () => {\n  return async(dispatch, getState) => {\n      // 現在のログインユーザーの取得\n      const uid = getState().users.uid;\n      const list = []\n      // firebaseへアクセスして注文履歴の取得\n      db.collection('users').doc(uid)\n      .collection('orders')\n      .orderBy('updated_at', 'desc')\n      .get()\n      .then((snapshots) => {\n        snapshots.forEach(snapshot => {\n          const data = snapshot.data()\n          list.push(data)\n        })\n        dispatch(fetchOrderHistoryAction(list))\n      })\n  }\n}\n\n// 認証リッスン\nexport const listenAuthState = () =>{\n\n  // redux-thunkを利用定型文\n  return async (dispatch) =>{\n    return auth.onAuthStateChanged(user =>{\n      // 認証されていた場合はstateを変更\n      if(user){   \n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            // 以下でアクションを呼び出しsiginの処理を行う\n            dispatch(\n              signInAction({\n                isSignedIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n              })\n            );\n          });\n\n      }else{\n        dispatch(push('/signIn'))\n      }\n    })\n  }\n}\n\n// ログイン\nexport const signIn = (email, password) => {\n  const dispatch = useDispatch;\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch) => {\n    // バリデーションを行う\n    if ( email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n    \n    auth.signInWithEmailAndPassword(email, password).then((result) => {\n      const user = result.user;\n\n      // ユーザが存在すれば処理にすすむ\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            // 以下でアクションを呼び出しsiginの処理を行う\n            dispatch(\n              signInAction({\n                isSignedIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n              })\n            );\n\n            dispatch(push(\"/\"));\n          });\n      }\n    });\n\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\n// ログアウト\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    auth.signOut()\n    .then(()=>{\n      dispatch(push('/'))\n    })\n  }\n}\n\n// パスワードを再設定\nexport const restPassword = (email) => {\n  return async (dispatch) => {\n    // バリデーションを行う\n    if (email === \"\" ) {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }else{\n      auth.sendPasswordResetEmail(email)\n      .then(()=>{\n        alert('入力されたメールにパスワードリセット用のメールを送りました')\n        dispatch(push('/signin'))\n      }).catch(()=>{\n          alert('パスワードリセットに失敗しました')\n      })\n    }\n  }\n}\n\n// 新規登録\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validations\n    \n      // バリデーションを行う\n      if (username === \"\" || email === \"\" || password === \"\") {\n        alert(\"必須項目が未入力です\");\n        return false;\n      }\n\n      if (password !== confirmPassword) {\n        alert(\"パスワードが一致しません。もう一度お試しください\");\n        return false;\n      }\n    \n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        const user = result.user;\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            customer_id: \"\",\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n          };\n          db.collection(\"users\")\n            .doc(uid)\n            .set(userInitialData)\n            .then(() => {\n              dispatch(push(\"/\"));\n            });\n          \n          \n        }\n      })\n      \n  };\n};"]},"metadata":{},"sourceType":"module"}