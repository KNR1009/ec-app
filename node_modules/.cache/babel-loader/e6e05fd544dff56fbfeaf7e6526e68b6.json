{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nimport { useDispatch } from \"react-redux\";\nexport const signIn = (email, password) => {\n  // コールバック関数を返り値として持つようにする\n  return async dispatch => {\n    // バリデーションを行う\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = resutlt.user; // ユーザが存在すれば処理にすすむ\n\n      if (user) {\n        const uid = user.uid;\n      }\n    });\n  }; // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n};\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validations\n    // バリデーションを行う\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          customer_id: \"\",\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection(\"users\").doc(uid).set(userInitialData).then(() => {\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","useDispatch","signIn","email","password","dispatch","alert","createUserWithEmailAndPassword","then","result","user","resutlt","uid","signUp","username","confirmPassword","timestamp","now","userInitialData","customer_id","created_at","role","updated_at","collection","doc","set"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,EAAjC,QAA0C,sBAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC;AACA,SAAO,MAAMC,QAAN,IAAmB;AACxB;AACA,QAAKF,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAAlC,EAAsC;AACpCE,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAEDR,IAAAA,IAAI,CAACS,8BAAL,CAAoCJ,KAApC,EAA2CC,QAA3C,EACCI,IADD,CACMC,MAAM,IAAI;AACd,YAAMC,IAAI,GAAGC,OAAO,CAACD,IAArB,CADc,CAGd;;AACA,UAAGA,IAAH,EAAQ;AACN,cAAME,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACD;AACF,KARD;AAUD,GAjBD,CAFyC,CAqBzC;AACD,CAtBM;AAwBP,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWX,KAAX,EAAkBC,QAAlB,EAA4BW,eAA5B,KAAgD;AACpE,SAAO,MAAOV,QAAP,IAAoB;AACzB;AAEE;AACA,QAAIS,QAAQ,KAAK,EAAb,IAAmBX,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAApD,EAAwD;AACtDE,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,QAAIF,QAAQ,KAAKW,eAAjB,EAAkC;AAChCT,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAGH,WAAOR,IAAI,CACRS,8BADI,CAC2BJ,KAD3B,EACkCC,QADlC,EAEJI,IAFI,CAEEC,MAAD,IAAY;AAChB,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AACA,UAAIA,IAAJ,EAAU;AACR,cAAME,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,cAAMI,SAAS,GAAGjB,iBAAiB,CAACkB,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACtBC,UAAAA,WAAW,EAAE,EADS;AAEtBC,UAAAA,UAAU,EAAEJ,SAFU;AAGtBb,UAAAA,KAAK,EAAEA,KAHe;AAItBkB,UAAAA,IAAI,EAAE,UAJgB;AAKtBT,UAAAA,GAAG,EAAEA,GALiB;AAMtBU,UAAAA,UAAU,EAAEN,SANU;AAOtBF,UAAAA,QAAQ,EAAEA;AAPY,SAAxB;AASAd,QAAAA,EAAE,CAACuB,UAAH,CAAc,OAAd,EACGC,GADH,CACOZ,GADP,EAEGa,GAFH,CAEOP,eAFP,EAGGV,IAHH,CAGQ,MAAM;AACVH,UAAAA,QAAQ,CAACR,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,SALH;AAQD;AACF,KA1BI,CAAP;AA4BD,GA3CD;AA4CD,CA7CM","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\nexport const signIn = (email, password) => {\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch) => {\n    // バリデーションを行う\n    if ( email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.createUserWithEmailAndPassword(email, password)\n    .then(result => {\n      const user = resutlt.user\n\n      // ユーザが存在すれば処理にすすむ\n      if(user){\n        const uid = user.uid\n      }\n    })\n\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validations\n    \n      // バリデーションを行う\n      if (username === \"\" || email === \"\" || password === \"\") {\n        alert(\"必須項目が未入力です\");\n        return false;\n      }\n\n      if (password !== confirmPassword) {\n        alert(\"パスワードが一致しません。もう一度お試しください\");\n        return false;\n      }\n    \n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        const user = result.user;\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            customer_id: \"\",\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n          };\n          db.collection(\"users\")\n            .doc(uid)\n            .set(userInitialData)\n            .then(() => {\n              dispatch(push(\"/\"));\n            });\n          \n          \n        }\n      })\n      \n  };\n};"]},"metadata":{},"sourceType":"module"}