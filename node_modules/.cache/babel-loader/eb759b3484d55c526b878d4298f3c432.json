{"ast":null,"code":"import _regeneratorRuntime from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/itoukazunari/Desktop/ec-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{CardElement}from'@stripe/react-stripe-js';import{db,FirebaseTimestamp}from\"../../firebase/index\";import{push}from\"connected-react-router\";import{useDispatch}from'react-redux';// Set Header\nvar headers=new Headers();headers.set('Content-type','application/json');var BASE_URL=\"https://ec-app-8ba0b.web.app/\";var createCustomer=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email,paymentMethodId,uid,username){var response,customerResponse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(BASE_URL+'/v1/customer',{method:'POST',headers:headers,body:JSON.stringify({email:email,paymentMethod:paymentMethodId,userId:uid,username:username})});case 2:response=_context.sent;_context.next=5;return response.json();case 5:customerResponse=_context.sent;return _context.abrupt(\"return\",JSON.parse(customerResponse.body));case 7:case\"end\":return _context.stop();}}},_callee);}));return function createCustomer(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export var registerCard=function registerCard(stripe,elements){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var user,email,uid,username,cardElement,_yield$stripe$createP,error,paymentMethod,paymentMethodId,customerData,updateUserState;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:user=getState().users;email=user.email;uid=user.uid;username=user.username;if(!(!stripe||!elements)){_context2.next=7;break;}// Stripe.js has not loaded yet. Make sure to disable\n// form submission until Stripe.js has loaded.\nconsole.error(\"Does not exist stripe or elements\");return _context2.abrupt(\"return\");case 7:// Get a reference to a mounted CardElement. Elements knows how\n// to find your CardElement because there can only ever be one of\n// each type of element.\ncardElement=elements.getElement(CardElement);// Use your card Element with other Stripe.js APIs\n_context2.next=10;return stripe.createPaymentMethod({type:'card',card:cardElement});case 10:_yield$stripe$createP=_context2.sent;error=_yield$stripe$createP.error;paymentMethod=_yield$stripe$createP.paymentMethod;if(!error){_context2.next=16;break;}console.log('error');return _context2.abrupt(\"return\");case 16:paymentMethodId=paymentMethod===null||paymentMethod===void 0?void 0:paymentMethod.id;_context2.next=19;return createCustomer(email,paymentMehotdId,uid);case 19:customerData=_context2.sent;if(!(customerData.id===\"\")){_context2.next=25;break;}alert('カード情報の登録に失敗しました');return _context2.abrupt(\"return\");case 25:updateUserState={customer_id:customerData.id,payment_method_id:paymentMethodId};db.collection('users').doc(uid).update(updateUserState).then(function(){// dispatch(updateUserStateAction(updateUserState))\ndispatch(push('/user/mypage'));});case 27:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x5,_x6){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/payments/operations.js"],"names":["CardElement","db","FirebaseTimestamp","push","useDispatch","headers","Headers","set","BASE_URL","createCustomer","email","paymentMethodId","uid","username","fetch","method","body","JSON","stringify","paymentMethod","userId","response","json","customerResponse","parse","registerCard","stripe","elements","dispatch","getState","user","users","console","error","cardElement","getElement","createPaymentMethod","type","card","log","id","paymentMehotdId","customerData","alert","updateUserState","customer_id","payment_method_id","collection","doc","update","then"],"mappings":"+SAAA,OAAQA,WAAR,KAA0B,yBAA1B,CACA,OAASC,EAAT,CAAaC,iBAAb,KAAsC,sBAAtC,CACA,OAASC,IAAT,KAAqB,wBAArB,CACA,OAASC,WAAT,KAA4B,aAA5B,CAGA;AACA,GAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,EAAhB,CACAD,OAAO,CAACE,GAAR,CAAY,cAAZ,CAA4B,kBAA5B,EACA,GAAMC,CAAAA,QAAQ,CAAG,+BAAjB,CAEA,GAAMC,CAAAA,cAAc,0FAAG,iBAAOC,KAAP,CAAcC,eAAd,CAA+BC,GAA/B,CAAoCC,QAApC,sKACIC,CAAAA,KAAK,CAACN,QAAQ,CAAG,cAAZ,CAA4B,CACpDO,MAAM,CAAE,MAD4C,CAEpDV,OAAO,CAAEA,OAF2C,CAGpDW,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBR,KAAK,CAAEA,KADU,CAEjBS,aAAa,CAAER,eAFE,CAGjBS,MAAM,CAAER,GAHS,CAIjBC,QAAQ,CAAEA,QAJO,CAAf,CAH8C,CAA5B,CADT,QACbQ,QADa,qCAYYA,CAAAA,QAAQ,CAACC,IAAT,EAZZ,QAYbC,gBAZa,+CAaZN,IAAI,CAACO,KAAL,CAAWD,gBAAgB,CAACP,IAA5B,CAbY,wDAAH,kBAAdP,CAAAA,cAAc,wDAApB,CAiBA,MAAO,IAAMgB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAASC,QAAT,CAAsB,CAChD,gGAAO,kBAAOC,QAAP,CAAiBC,QAAjB,qPACCC,IADD,CACQD,QAAQ,GAAGE,KADnB,CAECrB,KAFD,CAESoB,IAAI,CAACpB,KAFd,CAGCE,GAHD,CAGOkB,IAAI,CAAClB,GAHZ,CAICC,QAJD,CAIYiB,IAAI,CAACjB,QAJjB,MAMD,CAACa,MAAD,EAAW,CAACC,QANX,2BAOH;AACA;AACAK,OAAO,CAACC,KAAR,CAAc,mCAAd,EATG,yCAaL;AACA;AACA;AACMC,WAhBD,CAgBeP,QAAQ,CAACQ,UAAT,CAAoBnC,WAApB,CAhBf,CAkBL;AAlBK,wBAmBgC0B,CAAAA,MAAM,CAACU,mBAAP,CAA2B,CAC9DC,IAAI,CAAE,MADwD,CAE9DC,IAAI,CAAEJ,WAFwD,CAA3B,CAnBhC,8CAmBED,KAnBF,uBAmBEA,KAnBF,CAmBSd,aAnBT,uBAmBSA,aAnBT,KAwBDc,KAxBC,2BAyBHD,OAAO,CAACO,GAAR,CAAY,OAAZ,EAzBG,0CA6BC5B,eA7BD,CA6BmBQ,aA7BnB,SA6BmBA,aA7BnB,iBA6BmBA,aAAa,CAAEqB,EA7BlC,yBA8BsB/B,CAAAA,cAAc,CAACC,KAAD,CAAQ+B,eAAR,CAAyB7B,GAAzB,CA9BpC,SA8BC8B,YA9BD,qBAiCFA,YAAY,CAACF,EAAb,GAAoB,EAjClB,4BAkCHG,KAAK,CAAC,iBAAD,CAAL,CAlCG,0CAqCIC,eArCJ,CAqCsB,CACrBC,WAAW,CAAEH,YAAY,CAACF,EADL,CAErBM,iBAAiB,CAAEnC,eAFE,CArCtB,CA0CLV,EAAE,CAAC8C,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BpC,GAA3B,EACGqC,MADH,CACUL,eADV,EAEGM,IAFH,CAEQ,UAAI,CACR;AACAtB,QAAQ,CAACzB,IAAI,CAAC,cAAD,CAAL,CAAR,CACD,CALH,EA1CK,yDAAP,qEAmDD,CApDM","sourcesContent":["import {CardElement} from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\n\n\n// Set Header\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app/\"\n\nconst createCustomer = async (email, paymentMethodId, uid, username) => {\n    const response = await fetch(BASE_URL + '/v1/customer', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n            email: email,\n            paymentMethod: paymentMethodId,\n            userId: uid,\n            username: username\n        })\n    });\n\n    const customerResponse = await response.json();\n    return JSON.parse(customerResponse.body);\n}\n\n\nexport const registerCard = (stripe, elements) => {\n  return async (dispatch, getState)=> {\n    const user = getState().users;\n    const email = user.email;\n    const uid = user.uid;\n    const username = user.username;\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      console.error(\"Does not exist stripe or elements\");\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('error')\n      return;\n    } \n\n    const paymentMethodId = paymentMethod?.id;\n    const customerData = await createCustomer(email, paymentMehotdId, uid)\n\n    // 処理がうまくいっているのかの確認を行う\n    if(customerData.id === \"\"){\n      alert('カード情報の登録に失敗しました')\n      return;\n    }else{\n       const updateUserState = {\n          customer_id: customerData.id,\n          payment_method_id: paymentMethodId\n      }\n\n    db.collection('users').doc(uid)\n      .update(updateUserState)\n      .then(()=>{\n        // dispatch(updateUserStateAction(updateUserState))\n        dispatch(push('/user/mypage'))\n      })\n    }\n    \n  }\n}"]},"metadata":{},"sourceType":"module"}