{"ast":null,"code":"import { CardElement } from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\nimport { updateUserStateAction } from '../users/actions'; // Set Header\n\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app\"; // 新規登録を叩く\n\nconst createCustomer = async (email, paymentMethodId, uid) => {\n  const response = await fetch(BASE_URL + '/v1/customer', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      email: email,\n      paymentMethod: paymentMethodId,\n      userId: uid\n    })\n  });\n  const customerResponse = await response.json(); // firebaseに保存するために返り値を保存する\n\n  return JSON.parse(customerResponse.body);\n}; // ユーザーのカード情報を取得するAPIを叩くメソット\n\n\nexport const retrievePaymentMethod = async paymentMethodId => {\n  const response = await fetch(BASE_URL + '/v1/paymentMethod', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      paymentMethodId: paymentMethodId\n    })\n  });\n  const paymentMethodResponse = await response.json();\n  const paymentMethod = JSON.parse(paymentMethodResponse.body);\n  return paymentMethod.card;\n}; // ユーザー情報を更新するAPIを叩くメソット\n\nexport const updatePaymentMethod = async (customerId, prevPaymentMethodId, nextPaymentMethodId) => {\n  const response = await fetch(BASE_URL + '/v1/updatePaymentMethod', {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify({\n      customerId: customerId,\n      prevPaymentMethodId: prevPaymentMethodId,\n      nextPaymentMethodId: nextPaymentMethodId\n    })\n  });\n  const paymentMethodResponse = await response.json();\n  const paymentMethod = JSON.parse(paymentMethodResponse.body);\n  return paymentMethod.card;\n};\nexport const registerCard = (stripe, elements, customerId) => {\n  return async (dispatch, getState) => {\n    // ログインユーザーの情報を取得する\n    const user = getState().users;\n    const email = user.email;\n    const uid = user.uid; // 以下はバリデーションの定型分(コピペ)\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      console.error(\"Does not exist stripe or elements\");\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    // 以下でカード情報を取得する\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      alert('error');\n      return;\n    } // paymentメソットをトークン化したidを以下で取得する\n\n\n    const paymentMethodId = paymentMethod === null || paymentMethod === void 0 ? void 0 : paymentMethod.id;\n\n    if (customerId === \"\") {\n      // 新規登録の処理\n      // 新規登録のAPIを叩くメソットを呼び出す\n      const customerData = await createCustomer(email, paymentMethodId, uid); // 処理がうまくいっているのかの確認を行う\n\n      if (customerData.id === \"\") {\n        alert('カード情報の登録に失敗しました');\n        return;\n      } else {\n        const updateUserState = {\n          customer_id: customerData.id,\n          payment_method_id: paymentMethodId\n        };\n        db.collection('users').doc(uid).update(updateUserState).then(() => {\n          dispatch(updateUserStateAction(updateUserState));\n          dispatch(push('/user/mypage'));\n        }).catch(error => {\n          // stripe側には顧客情報が保存されている\n          alert('firebaseでの登録に失敗しました');\n        });\n      }\n    } else {\n      // 既存情報を更新する\n      // 既存のidを取得する\n      const prevPaymentMethodId = getState().users.payment_method_id;\n      const nextPaymentMethodId = paymentMethod === null || paymentMethod === void 0 ? void 0 : paymentMethod.id;\n      console.log(prevPaymentMethodId);\n      console.log(nextPaymentMethodId);\n      console.log();\n      const updatePaymentMethod = await updatePaymentMethod(customerId, prevPaymentMethodId, nextPaymentMethodId);\n\n      if (!updatePaymentMethod) {\n        alert('お客様情報の登録に失敗しました');\n      } else {\n        // 新しくfirebaseへ保存する\n        const userState = {\n          payment_method_id: paymentMethodId\n        };\n        db.collection('users').doc(uid).update(userState).then(() => {\n          dispatch(updateUserStateAction(userState));\n          alert('お客様情報を更新しました');\n          dispatch(push('/user/mypage'));\n        }).catch(() => {\n          alert('失敗しました');\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/payments/operations.js"],"names":["CardElement","db","FirebaseTimestamp","push","useDispatch","updateUserStateAction","headers","Headers","set","BASE_URL","createCustomer","email","paymentMethodId","uid","response","fetch","method","body","JSON","stringify","paymentMethod","userId","customerResponse","json","parse","retrievePaymentMethod","paymentMethodResponse","card","updatePaymentMethod","customerId","prevPaymentMethodId","nextPaymentMethodId","registerCard","stripe","elements","dispatch","getState","user","users","console","error","cardElement","getElement","createPaymentMethod","type","alert","id","customerData","updateUserState","customer_id","payment_method_id","collection","doc","update","then","catch","log","userState"],"mappings":"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","sourcesContent":["import {CardElement} from '@stripe/react-stripe-js';\nimport { db, FirebaseTimestamp } from \"../../firebase/index\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from 'react-redux';\nimport { updateUserStateAction } from '../users/actions'\n\n\n// Set Header\nconst headers = new Headers();\nheaders.set('Content-type', 'application/json');\nconst BASE_URL = \"https://ec-app-8ba0b.web.app\"\n\n// 新規登録を叩く\nconst createCustomer = async (email, paymentMethodId, uid) => {\n    const response = await fetch(BASE_URL + '/v1/customer', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n            email: email,\n            paymentMethod: paymentMethodId,\n            userId: uid\n        })\n    });\n\n    const customerResponse = await response.json();\n    // firebaseに保存するために返り値を保存する\n    return JSON.parse(customerResponse.body);\n}\n\n// ユーザーのカード情報を取得するAPIを叩くメソット\nexport const retrievePaymentMethod = async (paymentMethodId) => {\n    const response = await fetch(BASE_URL + '/v1/paymentMethod', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n            paymentMethodId: paymentMethodId\n        })\n    });\n\n    const paymentMethodResponse = await response.json();\n    const paymentMethod = JSON.parse(paymentMethodResponse.body);\n    return paymentMethod.card;\n}\n\n// ユーザー情報を更新するAPIを叩くメソット\nexport const updatePaymentMethod = async (customerId, prevPaymentMethodId, nextPaymentMethodId) => {\n    const response = await fetch(BASE_URL + '/v1/updatePaymentMethod', {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n            customerId: customerId,\n            prevPaymentMethodId: prevPaymentMethodId,\n            nextPaymentMethodId: nextPaymentMethodId,\n        })\n    });\n\n    const paymentMethodResponse = await response.json();\n    const paymentMethod = JSON.parse(paymentMethodResponse.body);\n    return paymentMethod.card\n}\n\n\nexport const registerCard = (stripe, elements, customerId) => {\n  return async (dispatch, getState)=> {\n    // ログインユーザーの情報を取得する\n    const user = getState().users;\n    const email = user.email;\n    const uid = user.uid;\n\n    // 以下はバリデーションの定型分(コピペ)\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      console.error(\"Does not exist stripe or elements\");\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n    // 以下でカード情報を取得する\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n     const {error, paymentMethod} = await stripe.createPaymentMethod({\n            type: 'card',\n            card: cardElement,\n        });\n\n    if (error) {\n      alert('error')\n      return;\n    } \n\n    // paymentメソットをトークン化したidを以下で取得する\n    const paymentMethodId = paymentMethod?.id;\n    \n    if(customerId === \"\"){\n      // 新規登録の処理\n        // 新規登録のAPIを叩くメソットを呼び出す\n    const customerData = await createCustomer(email, paymentMethodId, uid);\n     // 処理がうまくいっているのかの確認を行う\n      if(customerData.id === \"\"){\n        alert('カード情報の登録に失敗しました')\n        return;\n      }else{\n        const updateUserState = {\n            customer_id: customerData.id,\n            payment_method_id: paymentMethodId\n        }\n        db.collection('users').doc(uid)\n          .update(updateUserState)\n          .then(()=>{\n            dispatch(updateUserStateAction(updateUserState))\n            dispatch(push('/user/mypage'))\n          }).catch((error)=>{\n            // stripe側には顧客情報が保存されている\n            alert('firebaseでの登録に失敗しました')\n          })\n        }\n    }else{\n      // 既存情報を更新する\n      // 既存のidを取得する\n      const prevPaymentMethodId = getState().users.payment_method_id;\n      const nextPaymentMethodId= paymentMethod?.id;\n      console.log(prevPaymentMethodId);\n      console.log(nextPaymentMethodId)\n      console.log()\n      const updatePaymentMethod = await updatePaymentMethod(customerId, prevPaymentMethodId, nextPaymentMethodId);\n\n      if(!updatePaymentMethod){\n        alert('お客様情報の登録に失敗しました')\n      }else{\n        // 新しくfirebaseへ保存する\n        const userState = {\n          payment_method_id: paymentMethodId\n        }\n        db.collection('users').doc(uid)\n        .update(userState)\n        .then(()=>{\n          dispatch(updateUserStateAction(userState))\n          alert('お客様情報を更新しました');\n          dispatch(push('/user/mypage'))\n        }).catch(()=>{\n          alert('失敗しました');\n        })\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}