{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nimport { useDispatch } from \"react-redux\"; // カートに追加するオペレーションを作成する\n\nexport const addProductToCart = () => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n  };\n}; // 認証リッスン\n\nexport const listenAuthState = () => {\n  // redux-thunkを利用定型文\n  return async dispatch => {\n    return auth.onAuthStateChanged(user => {\n      // 認証されていた場合はstateを変更\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\").doc(uid).get().then(snapshot => {\n          const data = snapshot.data(); // 以下でアクションを呼び出しsiginの処理を行う\n\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n        });\n      } else {\n        dispatch(push('/signIn'));\n      }\n    });\n  };\n}; // ログイン\n\nexport const signIn = (email, password) => {\n  const dispatch = useDispatch; // コールバック関数を返り値として持つようにする\n\n  return async dispatch => {\n    // バリデーションを行う\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user; // ユーザが存在すれば処理にすすむ\n\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\").doc(uid).get().then(snapshot => {\n          const data = snapshot.data(); // 以下でアクションを呼び出しsiginの処理を行う\n\n          dispatch(signInAction({\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  }; // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}; // ログアウト\n\nexport const signOut = () => {\n  return async dispatch => {\n    auth.signOut().then(() => {\n      dispatch(push('/'));\n    });\n  };\n}; // パスワードを再設定\n\nexport const restPassword = email => {\n  return async dispatch => {\n    // バリデーションを行う\n    if (email === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    } else {\n      auth.sendPasswordResetEmail(email).then(() => {\n        alert('入力されたメールにパスワードリセット用のメールを送りました');\n        dispatch(push('/signin'));\n      }).catch(() => {\n        alert('パスワードリセットに失敗しました');\n      });\n    }\n  };\n}; // 新規登録\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validations\n    // バリデーションを行う\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          customer_id: \"\",\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection(\"users\").doc(uid).set(userInitialData).then(() => {\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","useDispatch","addProductToCart","dispatch","getState","uid","users","listenAuthState","onAuthStateChanged","user","collection","doc","get","then","snapshot","data","isSignedIn","role","username","signIn","email","password","alert","signInWithEmailAndPassword","result","signOut","restPassword","sendPasswordResetEmail","catch","signUp","confirmPassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","customer_id","created_at","updated_at","set"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,EAAjC,QAA0C,sBAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAGA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAClC,UAAMC,GAAG,GAAGD,QAAQ,GAAGE,KAAX,CAAiBD,GAA7B;AACD,GAFD;AAGH,CAJM,C,CAQP;;AACA,OAAO,MAAME,eAAe,GAAG,MAAK;AAElC;AACA,SAAO,MAAOJ,QAAP,IAAmB;AACxB,WAAOL,IAAI,CAACU,kBAAL,CAAwBC,IAAI,IAAG;AACpC;AACA,UAAGA,IAAH,EAAQ;AACN,cAAMJ,GAAG,GAAGI,IAAI,CAACJ,GAAjB;AACAL,QAAAA,EAAE,CAACU,UAAH,CAAc,OAAd,EACGC,GADH,CACON,GADP,EAEGO,GAFH,GAGGC,IAHH,CAGSC,QAAD,IAAc;AAClB,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb,CADkB,CAGlB;;AACAZ,UAAAA,QAAQ,CACNP,YAAY,CAAC;AACXoB,YAAAA,UAAU,EAAE,IADD;AAEXC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAFA;AAGXZ,YAAAA,GAAG,EAAEA,GAHM;AAIXa,YAAAA,QAAQ,EAAEH,IAAI,CAACG;AAJJ,WAAD,CADN,CAAR;AAQD,SAfH;AAiBD,OAnBD,MAmBK;AACHf,QAAAA,QAAQ,CAACN,IAAI,CAAC,SAAD,CAAL,CAAR;AACD;AACF,KAxBM,CAAP;AAyBD,GA1BD;AA2BD,CA9BM,C,CAgCP;;AACA,OAAO,MAAMsB,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,QAAMlB,QAAQ,GAAGF,WAAjB,CADyC,CAEzC;;AACA,SAAO,MAAME,QAAN,IAAmB;AACxB;AACA,QAAKiB,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAAlC,EAAsC;AACpCC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAEDxB,IAAAA,IAAI,CAACyB,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,EAAiDR,IAAjD,CAAuDW,MAAD,IAAY;AAChE,YAAMf,IAAI,GAAGe,MAAM,CAACf,IAApB,CADgE,CAGhE;;AACA,UAAIA,IAAJ,EAAU;AACR,cAAMJ,GAAG,GAAGI,IAAI,CAACJ,GAAjB;AACAL,QAAAA,EAAE,CAACU,UAAH,CAAc,OAAd,EACGC,GADH,CACON,GADP,EAEGO,GAFH,GAGGC,IAHH,CAGSC,QAAD,IAAc;AAClB,gBAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,EAAb,CADkB,CAGlB;;AACAZ,UAAAA,QAAQ,CACNP,YAAY,CAAC;AACXoB,YAAAA,UAAU,EAAE,IADD;AAEXC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAFA;AAGXZ,YAAAA,GAAG,EAAEA,GAHM;AAIXa,YAAAA,QAAQ,EAAEH,IAAI,CAACG;AAJJ,WAAD,CADN,CAAR;AASAf,UAAAA,QAAQ,CAACN,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,SAjBH;AAkBD;AACF,KAzBD;AA2BD,GAlCD,CAHyC,CAuCzC;AACD,CAxCM,C,CA0CP;;AAEA,OAAO,MAAM4B,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOtB,QAAP,IAAoB;AACzBL,IAAAA,IAAI,CAAC2B,OAAL,GACCZ,IADD,CACM,MAAI;AACRV,MAAAA,QAAQ,CAACN,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,KAHD;AAID,GALD;AAMD,CAPM,C,CASP;;AACA,OAAO,MAAM6B,YAAY,GAAIN,KAAD,IAAW;AACrC,SAAO,MAAOjB,QAAP,IAAoB;AACzB;AACA,QAAIiB,KAAK,KAAK,EAAd,EAAmB;AACjBE,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD,KAHD,MAGK;AACHxB,MAAAA,IAAI,CAAC6B,sBAAL,CAA4BP,KAA5B,EACCP,IADD,CACM,MAAI;AACRS,QAAAA,KAAK,CAAC,+BAAD,CAAL;AACAnB,QAAAA,QAAQ,CAACN,IAAI,CAAC,SAAD,CAAL,CAAR;AACD,OAJD,EAIG+B,KAJH,CAIS,MAAI;AACTN,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACH,OAND;AAOD;AACF,GAdD;AAeD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMO,MAAM,GAAG,CAACX,QAAD,EAAWE,KAAX,EAAkBC,QAAlB,EAA4BS,eAA5B,KAAgD;AACpE,SAAO,MAAO3B,QAAP,IAAoB;AACzB;AAEE;AACA,QAAIe,QAAQ,KAAK,EAAb,IAAmBE,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAApD,EAAwD;AACtDC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,QAAID,QAAQ,KAAKS,eAAjB,EAAkC;AAChCR,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAGH,WAAOxB,IAAI,CACRiC,8BADI,CAC2BX,KAD3B,EACkCC,QADlC,EAEJR,IAFI,CAEEW,MAAD,IAAY;AAChB,YAAMf,IAAI,GAAGe,MAAM,CAACf,IAApB;;AACA,UAAIA,IAAJ,EAAU;AACR,cAAMJ,GAAG,GAAGI,IAAI,CAACJ,GAAjB;AACA,cAAM2B,SAAS,GAAGjC,iBAAiB,CAACkC,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACtBC,UAAAA,WAAW,EAAE,EADS;AAEtBC,UAAAA,UAAU,EAAEJ,SAFU;AAGtBZ,UAAAA,KAAK,EAAEA,KAHe;AAItBH,UAAAA,IAAI,EAAE,UAJgB;AAKtBZ,UAAAA,GAAG,EAAEA,GALiB;AAMtBgC,UAAAA,UAAU,EAAEL,SANU;AAOtBd,UAAAA,QAAQ,EAAEA;AAPY,SAAxB;AASAlB,QAAAA,EAAE,CAACU,UAAH,CAAc,OAAd,EACGC,GADH,CACON,GADP,EAEGiC,GAFH,CAEOJ,eAFP,EAGGrB,IAHH,CAGQ,MAAM;AACVV,UAAAA,QAAQ,CAACN,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,SALH;AAQD;AACF,KA1BI,CAAP;AA4BD,GA3CD;AA4CD,CA7CM","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\n\n// カートに追加するオペレーションを作成する\n\nexport const addProductToCart = () => {\n    return async(dispatch, getState) => {\n      const uid = getState().users.uid\n    }\n}\n\n\n\n// 認証リッスン\nexport const listenAuthState = () =>{\n\n  // redux-thunkを利用定型文\n  return async (dispatch) =>{\n    return auth.onAuthStateChanged(user =>{\n      // 認証されていた場合はstateを変更\n      if(user){   \n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            // 以下でアクションを呼び出しsiginの処理を行う\n            dispatch(\n              signInAction({\n                isSignedIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n              })\n            );\n          });\n\n      }else{\n        dispatch(push('/signIn'))\n      }\n    })\n  }\n}\n\n// ログイン\nexport const signIn = (email, password) => {\n  const dispatch = useDispatch;\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch) => {\n    // バリデーションを行う\n    if ( email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n    \n    auth.signInWithEmailAndPassword(email, password).then((result) => {\n      const user = result.user;\n\n      // ユーザが存在すれば処理にすすむ\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            // 以下でアクションを呼び出しsiginの処理を行う\n            dispatch(\n              signInAction({\n                isSignedIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n              })\n            );\n\n            dispatch(push(\"/\"));\n          });\n      }\n    });\n\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\n// ログアウト\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    auth.signOut()\n    .then(()=>{\n      dispatch(push('/'))\n    })\n  }\n}\n\n// パスワードを再設定\nexport const restPassword = (email) => {\n  return async (dispatch) => {\n    // バリデーションを行う\n    if (email === \"\" ) {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }else{\n      auth.sendPasswordResetEmail(email)\n      .then(()=>{\n        alert('入力されたメールにパスワードリセット用のメールを送りました')\n        dispatch(push('/signin'))\n      }).catch(()=>{\n          alert('パスワードリセットに失敗しました')\n      })\n    }\n  }\n}\n\n// 新規登録\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validations\n    \n      // バリデーションを行う\n      if (username === \"\" || email === \"\" || password === \"\") {\n        alert(\"必須項目が未入力です\");\n        return false;\n      }\n\n      if (password !== confirmPassword) {\n        alert(\"パスワードが一致しません。もう一度お試しください\");\n        return false;\n      }\n    \n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        const user = result.user;\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            customer_id: \"\",\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n          };\n          db.collection(\"users\")\n            .doc(uid)\n            .set(userInitialData)\n            .then(() => {\n              dispatch(push(\"/\"));\n            });\n          \n          \n        }\n      })\n      \n  };\n};"]},"metadata":{},"sourceType":"module"}