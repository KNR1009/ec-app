{"ast":null,"code":"import { signInAction, fetchProductsInCartAction, fetchOrderHistoryAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nimport { useDispatch } from \"react-redux\"; // カートに追加するオペレーションを作成する\n\nexport const addProductToCart = addedProduct => {\n  return async (dispatch, getState) => {\n    const uid = getState().users.uid;\n    const cartRef = db.collection('users').doc(uid).collection('cart').doc();\n    addedProduct['cartId'] = cartRef.id;\n    await cartRef.set(addedProduct);\n    dispatch(push('/'));\n  };\n};\nexport const fetchProductsInCart = products => {\n  return async dispatch => {\n    dispatch(fetchProductsInCartAction(products));\n  };\n}; // 注文履歴を取得するオペレーション\n\nexport const fetchOrderHistory = () => {\n  return async (dispatch, getState) => {\n    // 現在のログインユーザーの取得\n    const uid = getState().users.uid;\n    const list = []; // firebaseへアクセスして注文履歴の取得\n\n    db.collection('users').doc(uid).collection('orders').orderBy('updated_at', 'desc').get().then(snapshots => {\n      snapshots.forEach(snapshot => {\n        const data = snapshot.data();\n        list.push(data);\n      });\n      dispatch(fetchOrderHistoryAction(list));\n    });\n  };\n}; // 認証リッスン\n\nexport const listenAuthState = () => {\n  // redux-thunkを利用定型文\n  return async dispatch => {\n    return auth.onAuthStateChanged(user => {\n      // 認証されていた場合はstateを変更\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\").doc(uid).get().then(snapshot => {\n          const data = snapshot.data(); // 以下でアクションを呼び出しsiginの処理を行う\n\n          dispatch(signInAction({\n            email: data.email,\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n        });\n      } else {\n        dispatch(push('/signIn'));\n      }\n    });\n  };\n}; // ログイン\n\nexport const signIn = (email, password) => {\n  const dispatch = useDispatch; // コールバック関数を返り値として持つようにする\n\n  return async dispatch => {\n    // バリデーションを行う\n    if (email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    auth.signInWithEmailAndPassword(email, password).then(result => {\n      const user = result.user; // ユーザが存在すれば処理にすすむ\n\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\").doc(uid).get().then(snapshot => {\n          const data = snapshot.data(); // 以下でアクションを呼び出しsiginの処理を行う\n\n          dispatch(signInAction({\n            email: data.email,\n            isSignedIn: true,\n            role: data.role,\n            uid: uid,\n            username: data.username\n          }));\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  }; // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}; // ログアウト\n\nexport const signOut = () => {\n  return async dispatch => {\n    auth.signOut().then(() => {\n      dispatch(push('/'));\n    });\n  };\n}; // パスワードを再設定\n\nexport const restPassword = email => {\n  return async dispatch => {\n    // バリデーションを行う\n    if (email === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    } else {\n      auth.sendPasswordResetEmail(email).then(() => {\n        alert('入力されたメールにパスワードリセット用のメールを送りました');\n        dispatch(push('/signin'));\n      }).catch(() => {\n        alert('パスワードリセットに失敗しました');\n      });\n    }\n  };\n}; // 新規登録\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validations\n    // バリデーションを行う\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          customer_id: \"\",\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection(\"users\").doc(uid).set(userInitialData).then(() => {\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","fetchProductsInCartAction","fetchOrderHistoryAction","push","auth","FirebaseTimestamp","db","useDispatch","addProductToCart","addedProduct","dispatch","getState","uid","users","cartRef","collection","doc","id","set","fetchProductsInCart","products","fetchOrderHistory","list","orderBy","get","then","snapshots","forEach","snapshot","data","listenAuthState","onAuthStateChanged","user","email","isSignedIn","role","username","signIn","password","alert","signInWithEmailAndPassword","result","signOut","restPassword","sendPasswordResetEmail","catch","signUp","confirmPassword","createUserWithEmailAndPassword","timestamp","now","userInitialData","customer_id","created_at","updated_at"],"mappings":"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","sourcesContent":["import {signInAction, fetchProductsInCartAction, fetchOrderHistoryAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\n\n\n// カートに追加するオペレーションを作成する\nexport const addProductToCart = (addedProduct) => {\n    return async (dispatch, getState) => {\n        const uid = getState().users.uid;\n        const cartRef = db.collection('users').doc(uid).collection('cart').doc()\n        addedProduct['cartId'] = cartRef.id;\n        await cartRef.set(addedProduct);\n        dispatch(push('/'))\n    }\n}\n\nexport const fetchProductsInCart = (products) => {\n  return async(dispatch) => {\n    dispatch(fetchProductsInCartAction(products))\n  }\n}\n\n\n// 注文履歴を取得するオペレーション\nexport const fetchOrderHistory = () => {\n  return async(dispatch, getState) => {\n      // 現在のログインユーザーの取得\n      const uid = getState().users.uid;\n      const list = []\n      // firebaseへアクセスして注文履歴の取得\n      db.collection('users').doc(uid)\n      .collection('orders')\n      .orderBy('updated_at', 'desc')\n      .get()\n      .then((snapshots) => {\n        snapshots.forEach(snapshot => {\n          const data = snapshot.data()\n          list.push(data)\n        })\n        dispatch(fetchOrderHistoryAction(list))\n      })\n  }\n}\n\n// 認証リッスン\nexport const listenAuthState = () =>{\n\n  // redux-thunkを利用定型文\n  return async (dispatch) =>{\n    return auth.onAuthStateChanged(user =>{\n      // 認証されていた場合はstateを変更\n      if(user){   \n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            // 以下でアクションを呼び出しsiginの処理を行う\n            dispatch(\n              signInAction({\n                email: data.email,\n                isSignedIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n              })\n            );\n          });\n\n      }else{\n        dispatch(push('/signIn'))\n      }\n    })\n  }\n}\n\n// ログイン\nexport const signIn = (email, password) => {\n  const dispatch = useDispatch;\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch) => {\n    // バリデーションを行う\n    if ( email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n    \n    auth.signInWithEmailAndPassword(email, password).then((result) => {\n      const user = result.user;\n\n      // ユーザが存在すれば処理にすすむ\n      if (user) {\n        const uid = user.uid;\n        db.collection(\"users\")\n          .doc(uid)\n          .get()\n          .then((snapshot) => {\n            const data = snapshot.data();\n\n            // 以下でアクションを呼び出しsiginの処理を行う\n            dispatch(\n              signInAction({\n                email: data.email,\n                isSignedIn: true,\n                role: data.role,\n                uid: uid,\n                username: data.username,\n              })\n            );\n\n            dispatch(push(\"/\"));\n          });\n      }\n    });\n\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\n// ログアウト\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    auth.signOut()\n    .then(()=>{\n      dispatch(push('/'))\n    })\n  }\n}\n\n// パスワードを再設定\nexport const restPassword = (email) => {\n  return async (dispatch) => {\n    // バリデーションを行う\n    if (email === \"\" ) {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }else{\n      auth.sendPasswordResetEmail(email)\n      .then(()=>{\n        alert('入力されたメールにパスワードリセット用のメールを送りました')\n        dispatch(push('/signin'))\n      }).catch(()=>{\n          alert('パスワードリセットに失敗しました')\n      })\n    }\n  }\n}\n\n// 新規登録\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validations\n    \n      // バリデーションを行う\n      if (username === \"\" || email === \"\" || password === \"\") {\n        alert(\"必須項目が未入力です\");\n        return false;\n      }\n\n      if (password !== confirmPassword) {\n        alert(\"パスワードが一致しません。もう一度お試しください\");\n        return false;\n      }\n    \n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        const user = result.user;\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            customer_id: \"\",\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n          };\n          db.collection(\"users\")\n            .doc(uid)\n            .set(userInitialData)\n            .then(() => {\n              dispatch(push(\"/\"));\n            });\n          \n          \n        }\n      })\n      \n  };\n};"]},"metadata":{},"sourceType":"module"}