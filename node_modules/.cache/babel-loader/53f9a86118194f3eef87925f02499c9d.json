{"ast":null,"code":"import { signInAction } from \"./actions\";\nimport { push } from 'connected-react-router';\nimport { auth, FirebaseTimestamp, db } from '../../firebase/index';\nimport { useDispatch } from \"react-redux\";\nexport const signIn = (email, password) => {\n  // コールバック関数を返り値として持つようにする\n  return async (dispatch, getState) => {\n    // 現在のstateを取得する\n    const state = getState();\n    const isSignedIn = state.users.isSignedIn; // ログイン状態だった場合にgithubんおAPIを叩く(非同期処理)\n\n    if (!isSignedIn) {\n      const url = \"https://api.github.com/users/aponasi178cm\"; // 非同期処理を記述\n\n      const response = await fetch(url).then(res => res.json()).catch(() => null);\n      console.log(response);\n      const username = response.login; // 取得したレスポンスをstoreに格納する\n\n      dispatch(signInAction({\n        isSignedIn: true,\n        uid: '1011',\n        username: username\n      }));\n    }\n\n    ; // 成功したらHomeに遷移する\n\n    dispatch(push('/'));\n  }; // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n};\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async dispatch => {\n    // Validations\n    // バリデーションを行う\n    if (username === \"\" || email === \"\" || password === \"\") {\n      alert(\"必須項目が未入力です\");\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      alert(\"パスワードが一致しません。もう一度お試しください\");\n      return false;\n    }\n\n    return auth.createUserWithEmailAndPassword(email, password).then(result => {\n      const user = result.user;\n\n      if (user) {\n        const uid = user.uid;\n        const timestamp = FirebaseTimestamp.now();\n        const userInitialData = {\n          customer_id: \"\",\n          created_at: timestamp,\n          email: email,\n          role: \"customer\",\n          uid: uid,\n          updated_at: timestamp,\n          username: username\n        };\n        db.collection(\"users\").doc(uid).set(userInitialData).then(() => {\n          dispatch(push(\"/\"));\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/ec-app/src/reducks/users/operations.js"],"names":["signInAction","push","auth","FirebaseTimestamp","db","useDispatch","signIn","email","password","dispatch","getState","state","isSignedIn","users","url","response","fetch","then","res","json","catch","console","log","username","login","uid","signUp","confirmPassword","alert","createUserWithEmailAndPassword","result","user","timestamp","now","userInitialData","customer_id","created_at","role","updated_at","collection","doc","set"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AACA,SAAQC,IAAR,QAAmB,wBAAnB;AACA,SAAQC,IAAR,EAAcC,iBAAd,EAAiCC,EAAjC,QAA0C,sBAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC;AACA,SAAO,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACpC;AACA,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAME,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYD,UAA/B,CAHoC,CAKpC;;AACA,QAAG,CAACA,UAAJ,EAAe;AACb,YAAME,GAAG,GAAG,2CAAZ,CADa,CAGb;;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EAAmCC,KAAnC,CAAyC,MAAI,IAA7C,CAAvB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AAEA,YAAMQ,QAAQ,GAAGR,QAAQ,CAACS,KAA1B,CARa,CAUb;;AACAf,MAAAA,QAAQ,CAACT,YAAY,CAAC;AACpBY,QAAAA,UAAU,EAAE,IADQ;AAEpBa,QAAAA,GAAG,EAAE,MAFe;AAGpBF,QAAAA,QAAQ,EAAEA;AAHU,OAAD,CAAb,CAAR;AAKC;;AAAA,KAtBiC,CAwBlC;;AACAd,IAAAA,QAAQ,CAACR,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,GA1BD,CAFyC,CA8BzC;AACD,CA/BM;AAiCP,OAAO,MAAMyB,MAAM,GAAG,CAACH,QAAD,EAAWhB,KAAX,EAAkBC,QAAlB,EAA4BmB,eAA5B,KAAgD;AACpE,SAAO,MAAOlB,QAAP,IAAoB;AACzB;AAEE;AACA,QAAIc,QAAQ,KAAK,EAAb,IAAmBhB,KAAK,KAAK,EAA7B,IAAmCC,QAAQ,KAAK,EAApD,EAAwD;AACtDoB,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,QAAIpB,QAAQ,KAAKmB,eAAjB,EAAkC;AAChCC,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAGH,WAAO1B,IAAI,CACR2B,8BADI,CAC2BtB,KAD3B,EACkCC,QADlC,EAEJS,IAFI,CAEEa,MAAD,IAAY;AAChB,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AACA,UAAIA,IAAJ,EAAU;AACR,cAAMN,GAAG,GAAGM,IAAI,CAACN,GAAjB;AACA,cAAMO,SAAS,GAAG7B,iBAAiB,CAAC8B,GAAlB,EAAlB;AAEA,cAAMC,eAAe,GAAG;AACtBC,UAAAA,WAAW,EAAE,EADS;AAEtBC,UAAAA,UAAU,EAAEJ,SAFU;AAGtBzB,UAAAA,KAAK,EAAEA,KAHe;AAItB8B,UAAAA,IAAI,EAAE,UAJgB;AAKtBZ,UAAAA,GAAG,EAAEA,GALiB;AAMtBa,UAAAA,UAAU,EAAEN,SANU;AAOtBT,UAAAA,QAAQ,EAAEA;AAPY,SAAxB;AASAnB,QAAAA,EAAE,CAACmC,UAAH,CAAc,OAAd,EACGC,GADH,CACOf,GADP,EAEGgB,GAFH,CAEOP,eAFP,EAGGjB,IAHH,CAGQ,MAAM;AACVR,UAAAA,QAAQ,CAACR,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,SALH;AAQD;AACF,KA1BI,CAAP;AA4BD,GA3CD;AA4CD,CA7CM","sourcesContent":["import {signInAction} from \"./actions\";\nimport {push} from 'connected-react-router';\nimport {auth, FirebaseTimestamp ,db} from '../../firebase/index'\nimport { useDispatch } from \"react-redux\";\n\nexport const signIn = (email, password) => {\n  // コールバック関数を返り値として持つようにする\n  return async(dispatch, getState) => {\n  // 現在のstateを取得する\n  const state = getState();\n  const isSignedIn = state.users.isSignedIn;\n\n  // ログイン状態だった場合にgithubんおAPIを叩く(非同期処理)\n  if(!isSignedIn){\n    const url = \"https://api.github.com/users/aponasi178cm\";\n\n    // 非同期処理を記述\n    const response = await fetch(url).then(res => res.json()).catch(()=>null)\n\n    console.log(response);\n\n    const username = response.login;\n\n    // 取得したレスポンスをstoreに格納する\n    dispatch(signInAction({\n      isSignedIn: true,\n      uid: '1011',\n      username: username\n    }))\n    };\n\n    // 成功したらHomeに遷移する\n    dispatch(push('/'));\n  }\n\n  // 上記の記述を先ほどのLoginコンポーネントのクリック時のイベントで発火するようにする\n}\n\nexport const signUp = (username, email, password, confirmPassword) => {\n  return async (dispatch) => {\n    // Validations\n    \n      // バリデーションを行う\n      if (username === \"\" || email === \"\" || password === \"\") {\n        alert(\"必須項目が未入力です\");\n        return false;\n      }\n\n      if (password !== confirmPassword) {\n        alert(\"パスワードが一致しません。もう一度お試しください\");\n        return false;\n      }\n    \n\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        const user = result.user;\n        if (user) {\n          const uid = user.uid;\n          const timestamp = FirebaseTimestamp.now();\n\n          const userInitialData = {\n            customer_id: \"\",\n            created_at: timestamp,\n            email: email,\n            role: \"customer\",\n            uid: uid,\n            updated_at: timestamp,\n            username: username,\n          };\n          db.collection(\"users\")\n            .doc(uid)\n            .set(userInitialData)\n            .then(() => {\n              dispatch(push(\"/\"));\n            });\n          \n          \n        }\n      })\n      \n  };\n};"]},"metadata":{},"sourceType":"module"}